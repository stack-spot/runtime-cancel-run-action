name: "Runtime Cancel Run Action"

description: "Runtime Cancel Run Action"

inputs:
  CLIENT_ID:
    description: Account client id
    required: true
  CLIENT_KEY:
    description: Account client secret key
    required: true
  CLIENT_REALM:
    description: Account client realm
    required: true
  RUN_ID:
    description: RUN_ID to cancel
    required: true
  FORCE_CANCEL:
    description: "Forces the cancel"
    required: true
    default: "true"
  BETA_ENVIRONMENT:
    description: "Used internally by statckspot to test beta version (default, stg, dev)."
    required: false
    default: "default"

outputs:
  run_data:
    description: "Run data after execution"
    value: ${{ steps.cancel.outputs.run_data }}

runs:
  using: "composite"
  steps:
    - name: Cancel Run
      id: cancel
      uses: actions/github-script@v7
      env:
        CLIENT_ID: ${{ inputs.CLIENT_ID }}
        CLIENT_KEY: ${{ inputs.CLIENT_KEY }}
        CLIENT_REALM: ${{ inputs.CLIENT_REALM }}
        RUN_ID: ${{ inputs.RUN_ID }}
        FORCE_CANCEL: ${{ inputs.FORCE_CANCEL }}
        BETA_ENVIRONMENT: ${{ inputs.BETA_ENVIRONMENT }}
      with:
        script: |
          const CLIENT_ID = process.env.CLIENT_ID;
          const CLIENT_KEY = process.env.CLIENT_KEY;
          const CLIENT_REALM = process.env.CLIENT_REALM;
          const RUN_ID = process.env.RUN_ID;
          const FORCE = process.env.FORCE_CANCEL || 'true';
          const BETA_ENVIRONMENT = process.env.BETA_ENVIRONMENT || 'default';

          console.log("CLIENT_ID:", CLIENT_ID);
          console.log("CLIENT_KEY:", CLIENT_KEY);
          console.log("CLIENT_REALM:", CLIENT_REALM);
          console.log("RUN_ID:", RUN_ID);
          console.log("FORCE:", FORCE);
          console.log("BETA_ENVIRONMENT:", BETA_ENVIRONMENT);

          if (!CLIENT_ID || !CLIENT_KEY || !CLIENT_REALM) {
            core.setFailed("- Some mandatory input is empty. Please, check the input list.");
            return;
          }

          if (!RUN_ID) {
            console.log("- RUN_ID was not provided.");
            console.log("  Deployment was not successfully created.");
            console.log("  No need to cancel it.");
            return;
          }

          const URLS = {
            "stg": {
              "API_URL": "https://runtime-manager.stg.stackspot.com",
              "AUTH_URL": "https://iam-auth-ssr.stg.stackspot.com"
            },
            "dev": {
              "API_URL": "https://runtime-manager.dev.stackspot.com",
              "AUTH_URL": "https://iam-auth-ssr.dev.stackspot.com"
            },
            "default": {
              "API_URL": "https://runtime-manager.v1.stackspot.com",
              "AUTH_URL": "https://auth.stackspot.com"
            }
          };

          const getUrls = () => {
            if (BETA_ENVIRONMENT === 'dev' || BETA_ENVIRONMENT === 'stg') {
              return URLS[BETA_ENVIRONMENT];
            }
            return URLS['default'];
          };

          const { API_URL, AUTH_URL } = getUrls();

          console.log("Authenticating..");
          const iamUrl = `${AUTH_URL}/${CLIENT_REALM}/oidc/oauth/token`;
          const iamHeaders = { 'Content-Type': 'application/x-www-form-urlencoded' };
          const iamData = new URLSearchParams({
            client_id: CLIENT_ID,
            grant_type: 'client_credentials',
            client_secret: CLIENT_KEY
          });

          const authenticate = async () => {
            const loginReq = await fetch(iamUrl, {
              method: 'POST',
              headers: iamHeaders,
              body: iamData
            });

            if (!loginReq.ok) {
              core.setFailed(`- Error during IAM authentication: ${loginReq.status} ${loginReq.statusText}`);
              return null;
            }

            const d1 = await loginReq.json();
            return d1.access_token;
          };

          const cancelRun = async (accessToken) => {
            const authHeaders = { "Authorization": `Bearer ${accessToken}`, "Content-Type": "application/json" };
            const cancelRunUrl = `${API_URL}/v1/run/cancel/${RUN_ID}?force=true`;

            console.log(`Requesting Run ${RUN_ID} to be cancelled`);

            const cancelRequest = await fetch(cancelRunUrl, {
              method: 'POST',
              headers: authHeaders
            });

            if (cancelRequest.status === 202) {
              console.log(`- RUN ${RUN_ID} cancelled successfully!`);
            } else if (cancelRequest.status === 404) {
              console.log(`- RUN ${RUN_ID} not found.`);
            } else if (cancelRequest.status === 422) {
              console.log(`- RUN ${RUN_ID} is already finished, no need to abort`);
            } else {
              core.setFailed(`- Error cancelling run: ${cancelRequest.status} ${cancelRequest.statusText}`);
            }
          };

          const fetchRunData = async (accessToken) => {
            const authHeaders = { "Authorization": `Bearer ${accessToken}`, "Content-Type": "application/json" };
            const fetchRunDataUrl = `${API_URL}/v1/run/${RUN_ID}`;

            const runDataReq = await fetch(fetchRunDataUrl, {
              method: 'GET',
              headers: authHeaders
            });

            if (runDataReq.ok) {
              const runData = await runDataReq.text();
              const fs = require('fs');
              const outputPath = './run_data_output.json';
              fs.writeFileSync(outputPath, runData);
              console.log(`Run data saved to ${outputPath}`);
              core.setOutput('run_data', outputPath);
            } else {
              core.setFailed(`- Error fetching run data: ${runDataReq.status} ${runDataReq.statusText}`);
            }
          };

          (async () => {
            const accessToken = await authenticate();
            if (accessToken) {
              await cancelRun(accessToken);
              await fetchRunData(accessToken);
            }
          })();

branding:
  icon: "terminal"
  color: "gray-dark"
